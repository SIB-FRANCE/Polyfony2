<?php

namespace Polyfony\Form;
use Gregwar\Captcha\CaptchaBuilder;
use \Polyfony\Config as Config;
use \Polyfony\Request as Request;
use \Polyfony\Store\Session as Session;
use \Polyfony\Keys as Keys;
use \Polyfony\Element as Element;
use \Polyfony\Response as Response;
use \Polyfony\Form as Form;


// This class is only a wrapper for Gregwar/Captcha 
class Captcha {

	const DEFAULT_LENGTH = 6;
	const DEFAULT_WIDTH = 150;
	const DEFAULT_HEIGHT = 40;
	const DEFAULT_MUST_FAIL_OCR_TEST = false;

	// the actual captcha object (Gregwar/Captcha)
	private $captcha = null;

	// this will instanciate a captcha
	public function __construct(
		int $length = self::DEFAULT_LENGTH, 
		int $width = self::DEFAULT_WIDTH,
		int $height = self::DEFAULT_HEIGHT,
		bool $must_fail_ocr_test = self::DEFAULT_MUST_FAIL_OCR_TEST
	) {

		// // check if the related captcha class exists
		// if(!class_exists('Gregwar\Captcha\CaptchaBuilder')) {
		// 	// die gracefuly
		// 	Throw new \Polyfony\Exception(
		// 		'to use Polyfony/Form/Token you must add "require Gregwar/Captcha" to your composer file', 
		// 		500
		// 	);
		// }

		// instancing a captcha will disable browser and framework caching
		// as to prevent mismatching captcha
		Response::disableBrowserCache();
		Response::disableOutputCache();

		// a phrase will be generated by the builder, and will live in the PHP session
		$this->captcha = new CaptchaBuilder($length);

		// build it, with additional parameters (size, and OCR pre-testing)
		$must_fail_ocr_test ? 
			$this->captcha->buildAgainstOCR($width, $height) :
			$this->captcha->build($width, $height);


		// // store it in the current session
		Session::put(Config::get('form','captcha_name'), $this->getValue(), true);

	}

	// get the value of the captcha, for manual use
	public function getValue() :string {

		// return as is
		return $this->captcha->getPhrase();

	}

	public function __toString() {

		// an inline captcha image element
		return (string) new Element('img', [
			'src'	=>$this->captcha->inline(),
			'class'	=>Config::get('form','captcha_name')
		]);

	}

	// this will produce an input field to type the captcha
	public static function input(array $attributes = []) :Element {
		
		return Form::input(Config::get('form','captcha_name'), null, $attributes);

	}

	// this will check, upon posting the form, that it is legitimate
	public static function enforce() :void {

		// if the request is of type post
		if(Request::isPost()) {
			// is a captcha is present
			if(Request::post(Config::get('form','captcha_name'))) {
				// check the provided captcha against our legitimate tokens
				if(!self::isLegitimate(Request::post(
					Config::get('form','captcha_name')
				))) {
					// soft redirect to the previous page after a few seconds
					Response::setRedirect(Request::server('HTTP_REFERER'), 3);
					// throw an exception to prevent this action from succeeding
					Throw new \Polyfony\Exception('Polyfony/Form/Captcha::enforce() wrong Captcha');
				}
			}
			// missing captcha
			else {
				// soft redirect to the previous page after a few seconds
				Response::setRedirect(Request::server('HTTP_REFERER'), 3);
				// throw an exception to prevent this action from succeeding
				Throw new \Polyfony\Exception('Polyfony/Form/Captcha::enforce() missing Captcha');
			}
		}

	}

	private static function isLegitimate($captcha) :bool {

		// look for that captcha in the current session
		if(Session::has(Config::get('form','captcha_name'))) {
			// get it
			$current_token = Session::get(Config::get('form','captcha_name'));
			// if it matches
			if($current_token === $captcha) {
				// remove it
				Session::remove(Config::get('form','captcha_name'));
				// return true
				return true;
			}
			else {
				// not valid
				return false;
			}
		}
		// invalid captcha
		else {
			// return false
			return false;
		}

	}
	
}

?>
